BTChip : Technical Specification  
=================================
BTChip <contact@btchip.com>
firmware versions 1.4.0 and 1.4.1

== About

BTChip is a USB smartcard/dongle dedicated to secure bitcoin transactions. It performs all sensitive cryptographic operations related to a bitcoin transaction (key generation & signature) onboard.

== Supported operations

BTChip supports :

   - Generation of an ECDSA keypair
   - Signature and verification of a SHA-256 hash precomputed by the host

== Additional key types 

The following key types are added 

   - 20 : Private key encryption - these keys are used to encrypt private keys 
   
The first Key Access parameters byte is coded as per the other keys, and the second byte is not used.

== Additional files 

Elliptic curve data are stored in transparent files, using the following format

[width="80%"]
|==============================================================================================================================
| *Bytes*            | *Description*                                                                           | *Length*
|                    | Size of A component                                                                     | 1
|                    | A component                                                                             | 
|                    | Size of B component                                                                     | 1
|                    | B component                                                                             | 
|                    | Size of Field component                                                                 | 1
|                    | Field component                                                                         | 
|                    | Size of G component                                                                     | 1
|                    | G component                                                                             | 
|                    | Size of R component                                                                     | 1
|                    | R component                                                                             | 
|                    | Size of K component                                                                     | 1
|                    | K component                                                                             | 
|==============================================================================================================================

== Bitcoin specific APDUs

=== GENERATE KEYPAIR OR IMPORT PRIVATE KEY

==== Description

This command is used to generate a keypair using the given curve parameters or import a given private key.

The file containing the curve parameter shall be selected before calling this command when generating a keypair.

The private part of the keypair will be encrypted by the Private key encryption key version passed as input parameter.
This key must be accessible when the function is called

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*        | *P2*       | *Lc*     | *Le*   
|   E0  |   20   |   00 : generate mode

                     80 : prepare mode       |   00       |   02     |   var
|==============================================================================================================================


'Input data (generate mode)'

[width="80%"]
|==============================================================================================================================
| *Byte(s)*  | *Description*                                                                                   | *Length*
| 1          | Version of the private key encryption to use                                                    | 1
| 2          | Keypair flags                                              

                          01 : signature authorization mandatory for this keypair (extended mode only)         | 1
|==============================================================================================================================

'Input data (prepare mode)'

[width="80%"]
|==============================================================================================================================
| *Byte(s)*  | *Description*                                                                                   | *Length*
| 1          | Version of the private key encryption to use                                                    | 1
| 2          | Keypair flags                                              

                          01 : signature authorization mandatory for this keypair (extended mode only)         | 1
| 3          | private key to encode                                                                           |
|==============================================================================================================================


'Output data (generate mode)'

[width="80%"]
|==============================================================================================================================
| *Byte(s)*  | *Description*                                                                                   | *Length*
| 1          | Length of public key component (*41*)                                                           | 1
|            | Public key component (W)                                                                        | p
|            | Length of encrypted private key component (*28*)                                                | 1
|            | Encrypted private key component (encrypted S)                                                   | P

|==============================================================================================================================

'Output data (prepare mode)'

[width="80%"]
|==============================================================================================================================
| *Byte(s)*  | *Description*                                                                                   | *Length*
| 1          | Encrypted private key component (encrypted S)                                                   | 

|==============================================================================================================================


'Licensing'

This function is always available

'Status Words'

[width="80%"]
|===============================================================================================
| *SW*     | *Description*
|   6581   | Memory problem
|   6700   | Incorrect length
|   6982   | Security status not satisfied (Bitcoin dongle is locked or invalid access rights)
|   6A82   | File not found
|   6B00   | Incorrect parameter P1 or P2
|   6Fxx   | Technical problem (00 : no diagnostic given)
|   9000   | Normal ending of the command
|   9804   | Access condition not fulfilled
|================================================================================================

=== ECDSA SIGN/VERIFY IMMEDIATE

==== Description

This command is used to sign a given hash using a private key or verify a given signature using a public key

The file containing the curve parameter shall be selected before calling this command.

The private key shall be encrypted by the Private key encryption key version passed as input parameter.
This key must be accessible when the function is called

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*        | *P2*       | *Lc*     | *Le*   
|   E0  |   40   |   00 : sign

                     80 : verify        |   00       |  var     |   var
|==============================================================================================================================


'Input data (sign mode)'

[width="80%"]
|==============================================================================================================================
| *Byte(s)*  | *Description*                                                                                   | *Length*
| 1          | Version of the private key encryption to use                                                    | 1
| 2          | Length of encrypted private key                                                                 | 1
| 3          | Encrypted private key                                                                           |
|            | Hash to sign
|==============================================================================================================================

'Input data (verify mode)'

[width="80%"]
|==============================================================================================================================
| *Byte(s)*  | *Description*                                                                                   | *Length*
| 1          | Length of public key                                                                            | 1
| 2          | Public key                                                                                      |
|            | Length of hash to verify (up to 32 bytes)
|            | Hash to verify
|            | Signature
|==============================================================================================================================


'Output data (sign mode)'

[width="80%"]
|==============================================================================================================================
| *Byte(s)*  | *Description*                                                                                   | *Length*
|            | Signed hash, as ASN-1 encoded R & S components                                                  | 
|==============================================================================================================================

'Output data (verify mode)'

None


'Licensing'

This function is always available

'Status Words'

[width="80%"]
|===============================================================================================
| *SW*     | *Description*
|   6581   | Memory problem
|   6700   | Incorrect length
|   6982   | Security status not satisfied (Bitcoin dongle is locked or invalid access rights)
|   6A80   | Invalid data (invalid key encryption)
|   6A82   | File not found
|   6B00   | Incorrect parameter P1 or P2
|   6Fxx   | Technical problem (00 : no diagnostic given)
|   9000   | Normal ending of the command
|   9804   | Access condition not fulfilled
|================================================================================================

== Data structures

=== Encoded private key for a 256 bits curve

An encoded private key is stored internally as follow, Triple DES encrypted by the context key

[width="80%"]
|==============================================================================================================================
| *Byte(s)*  | *Description*                                                                           | *Length*
| 1          | Magic version (*B1*)                                                                    | 1
| 2          | Private key flags                                                                       | 1
| 3-4        | Internal reference of the curve used to generate this key (1.4.1)                       | 2
| 3-8        | Nonce                                                                                   | 4
| 9          | Private key component (S)                                                               | 32
|==============================================================================================================================


